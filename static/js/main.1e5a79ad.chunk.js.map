{"version":3,"sources":["assets/svg/logo.svg","components/header.tsx","components/layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","href","src","Logo","alt","Layout","children","IndexPage","hero","headline","paragraphs","map","paragraph","buttonOne","link","label","buttonTwo","resources","resource","icon","faTwitter","faGithub","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"giBAAe,MAA0B,iC,OCW1BA,EARA,kBACb,qBAAKC,UAAU,yCAAf,SACE,mBAAGC,KAAK,IAAR,SACE,qBAAKD,UAAU,sBAAsBE,IAAKC,EAAMC,IAAI,cCiB3CC,EAlBA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,qCACE,qBAAKN,UAAU,4BAAf,SACE,cAAC,EAAD,MAEF,sBAAKA,UAAU,8BAAf,UACE,+BACE,qBAAKA,UAAU,yCAAf,SACGM,MAGL,kC,eC2DOC,EArEsB,kBACnC,eAAC,EAAD,WACE,sBAAKP,UAAU,6CAAf,UACE,oBAAIA,UAAU,mIAAd,SACGQ,EAAKC,WAEPD,EAAKE,WAAWC,KAAI,SAACC,GAAD,OACnB,mBAAGZ,UAAU,aAAb,SAA2BY,OAE7B,sBAAKZ,UAAU,2BAAf,UACE,mBAAGC,KAAMO,EAAKK,UAAUC,KAAxB,SACE,wBAAQd,UAAU,2EAAlB,SACGQ,EAAKK,UAAUE,UAGpB,mBAAGd,KAAMO,EAAKQ,UAAUF,KAAxB,SACE,wBAAQd,UAAU,6EAAlB,SACGQ,EAAKQ,UAAUD,gBAMxB,sBAAKf,UAAU,kCAAf,UACE,sBAAKA,UAAU,yDAAf,UACE,oBAAIA,UAAU,4CAAd,uBACA,oBAAIA,UAAU,wBAAd,SACGiB,EAAUN,KAAI,SAACO,GAAD,OACb,oBAAIlB,UAAU,QAAd,SACE,mBAAGC,KAAMiB,EAASJ,KAAlB,SAAyBI,EAASH,SADV,YAMhC,sBAAKf,UAAU,+DAAf,UACE,oBAAIA,UAAU,2CAAd,oBACA,+BAWE,oBAAIA,UAAU,gBAAd,SACE,oBAAGC,KAAK,oCAAoCD,UAAU,OAAtD,UACE,cAAC,IAAD,CAAiBmB,KAAMC,IAAWpB,UAAU,sBAC5C,6CAGJ,oBAAIA,UAAU,aAAd,SAEE,oBACEC,KAAK,6CACLD,UAAU,OAFZ,UAIE,cAAC,IAAD,CAAiBmB,KAAME,IAAUrB,UAAU,sBAC3C,yD,MCvDMsB,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZJC,IAASC,OAAO,cAACC,EAAD,IAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1e5a79ad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.d8764a70.svg\";","import React from \"react\";\nimport Logo from \"../assets/svg/logo.svg\";\n\nconst Header = () => (\n  <nav className=\"md:flex flex-wrap justify-between mt-5\">\n    <a href=\"/\">\n      <img className=\"w-64 cursor-pointer\" src={Logo} alt=\"logo\" />\n    </a>\n  </nav>\n);\n\nexport default Header;\n","import React from \"react\";\n// import '../assets/styles/global.css';\nimport Header from \"./header\";\n\n//@ts-ignore\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <div className=\"md:max-w-2xl px-8 mx-auto\">\n        <Header />\n      </div>\n      <div className=\"mx-auto max-w-4xl px-4 pb-6\">\n        <main>\n          <div className=\"md:max-w-2xl md:px-8 px-3 py-4 mx-auto\">\n            {children}\n          </div>\n        </main>\n        <footer></footer>\n      </div>\n    </>\n  );\n};\n\nexport default Layout;\n","import { faGithub, faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent, ReactElement } from \"react\";\nimport Layout from \"./components/layout\";\nimport hero from \"./content/hero.json\";\nimport resources from \"./content/resources.json\";\n\nconst IndexPage: FunctionComponent = (): ReactElement => (\n  <Layout>\n    <div className=\"backdrop-blur rounded-3xl md:p-10 p-1 mb-5\">\n      <h2 className=\"md:text-5xl text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-pink-300 via-indigo-300 to-green-500 p-2 mb-5\">\n        {hero.headline}\n      </h2>\n      {hero.paragraphs.map((paragraph) => (\n        <p className=\"prose my-3\">{paragraph}</p>\n      ))}\n      <div className=\"flex justify-evenly my-5\">\n        <a href={hero.buttonOne.link}>\n          <button className=\"bg-gradient-to-br from-blue-300 to-green-300 text-black rounded p-2 px-5\">\n            {hero.buttonOne.label}\n          </button>\n        </a>\n        <a href={hero.buttonTwo.link}>\n          <button className=\"bg-gradient-to-br from-pink-300 to-indigo-300 text-black rounded  p-2 px-5\">\n            {hero.buttonTwo.label}\n          </button>\n        </a>\n      </div>\n    </div>\n\n    <div className=\" flex flex-wrap justify-between\">\n      <div className=\"backdrop-blur rounded-3xl p-8 my-3 md:flex-none flex-1\">\n        <h3 className=\"md:text-3xl text-2xl text-indigo-300 py-2\">Resources</h3>\n        <ul className=\"list-disc list-inside\">\n          {resources.map((resource) => (\n            <li className=\"prose\" key=\"\">\n              <a href={resource.link}>{resource.label}</a>\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"backdrop-blur rounded-3xl p-8 px-11 my-3 md:flex-none flex-1\">\n        <h3 className=\"md:text-3xl text-2xl text-green-300 py-2\">Social</h3>\n        <ul>\n          {/* TODO: Add Discord\n           <li>\n              <a href=\"\" className=\"flex\">\n                <FontAwesomeIcon\n                  icon={faDiscord}\n                  className=\"h-5 w-5 mr-2 my-1\"\n                />\n                <p>Discord</p>\n              </a>\n            </li> */}\n          <li className=\"text-blue-300\">\n            <a href=\"https://www.twitter.com/phonondao\" className=\"flex\">\n              <FontAwesomeIcon icon={faTwitter} className=\"h-5 w-5 mr-2 my-1\" />\n              <p>Twitter</p>\n            </a>\n          </li>\n          <li className=\"text-white\">\n            {/* TODO: Replace Placehoder */}\n            <a\n              href=\"https://github.com/GridPlus/phonon-network\"\n              className=\"flex\"\n            >\n              <FontAwesomeIcon icon={faGithub} className=\"h-5 w-5 mr-2 my-1\" />\n              <p>Github</p>\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </Layout>\n);\n\nexport default IndexPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./assets/styles/index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}